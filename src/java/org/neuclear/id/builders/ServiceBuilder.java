package org.neuclear.id.builders;

import org.dom4j.Element;
import org.neuclear.commons.crypto.Base32;
import org.neuclear.commons.crypto.Base64;
import org.neuclear.commons.crypto.CryptoTools;
import org.neuclear.id.InvalidNamedObjectException;
import org.neuclear.xml.xmlsec.KeyInfo;

import java.security.PublicKey;

/*
$Id: ServiceBuilder.java,v 1.7 2004/09/06 22:23:12 pelle Exp $
$Log: ServiceBuilder.java,v $
Revision 1.7  2004/09/06 22:23:12  pelle
Added a fees element within the ServiceBuilder. This is so Services can add their fees structure in this particular place.

Revision 1.6  2004/04/27 15:25:39  pelle
Due to a new API change in 0.5 I have changed the name of Ledger and it's implementers to LedgerController.

Revision 1.5  2004/04/25 07:28:51  pelle
Cosmetic changes to signing servlet and neuclear pay web app.
Cosmetic changes to html generated by ServiceBuilder.
Fixed some stuff in Sender and SmtpSender
Added account registration.
Bumped version numbers in project.xml files to final release versions.

Revision 1.4  2004/04/23 23:34:03  pelle
Major update. Added an original url and nickname to Identity and friends.

Revision 1.3  2004/04/20 23:33:07  pelle
All unit tests (junit and cactus) work. The AssetControllerServlet is operational.

Revision 1.2  2004/04/17 19:28:21  pelle
Identity is now fully html based as is the ServiceBuilder.
VerifyingReader correctly identifies html files and parses them as such.
Targets and Target now parse html link tags
AssetBuilder and ExchangeAgentBuilder have been updated to support it and provide html formatted contracts.
The Asset.Reader and ExchangeAgent.Reader still need to be updated.

Revision 1.1  2004/04/05 16:32:52  pelle
Created new ServiceBuilder class for creating services. A service is an identity that has a seperate service URL and Service Public Key.

*/

/**
 * User: pelleb
 * Date: Apr 5, 2004
 * Time: 9:28:55 AM
 */
public class ServiceBuilder extends IdentityBuilder {
    public ServiceBuilder(final String type, final String title, final String original, final String serviceUrl, PublicKey serviceKey) throws InvalidNamedObjectException {
        super(type, original);
        addTarget(serviceUrl, "controller");

        Element style = head.addElement("style");
        style.setText("th { background:#EEF;}\n" +
                "table {background:#CCC;font-size:small;border:1px;}\n" +
                "pre {font-size:xx-small}\n" +
                "td {vertical-align:top;border:thin;background:#eee}\n");
        final Element nickelem = body.addElement("h1");
        nickelem.setText(title);
        nickelem.addAttribute("id", "nickname");

        description = body.addElement("div");
        description.addAttribute("id", "rules");

        body.addElement("h3").setText("Features");

        proptable = body.addElement("table");
        Element tr = proptable.addElement("tr");
        tr.addElement("th").setText("Type");
        tr.addElement("th").setText("Value");
        tr.addElement("th").setText("Description");

        fees = body.addElement("div");

        body.addElement("h3").setText("Keys");
        pktable = body.addElement("table");
//        pktable.addAttribute("class","pktable");
        tr = pktable.addElement("tr");
//        tr.addAttribute("class","tablehead");
        tr.addElement("th").setText("Type");
        tr.addElement("th").setText("Key ID");
        tr.addElement("th").setText("PublicKey");


        body.addElement("h3").setText("Rules");
        rules = body.addElement("div");
        rules.addAttribute("id", "rules");

        keys = body.addElement("div");
        keys.addAttribute("style", "display:none");

        addKeyInfo("controller.publickey", serviceKey, "Service Controllers Public Key");
        addFeature("controller.url", "Controller", serviceUrl, "The address of the service control server.");
    }

    protected void addKeyInfo(final String label, final PublicKey pub, final String description) {
        KeyInfo ki = new KeyInfo(pub);
        ki.getElement().addAttribute("id", label);
        ki.getElement().addAttribute("style", "display:none");
//        body.add(ki.getElement());
        keys.add(ki.getElement());
        Element tr = pktable.addElement("tr");
//        tr.addAttribute("class","pktablehead");
        tr.addElement("td").setText(description);
        tr.addElement("td").addElement("pre").setText(Base32.encode(CryptoTools.digest(pub.getEncoded())));
        tr.addElement("td").addElement("pre").setText(Base64.encodeClean(pub.getEncoded()));
    }

    protected void addFeature(final String id, final String name, final String value, final String description) {
        Element tr = proptable.addElement("tr");
//        tr.addAttribute("class","pktablehead");
        tr.addElement("td").setText(name);
        final Element val = tr.addElement("td");
        val.setText(value);
        val.addAttribute("id", id);
        tr.addElement("td").setText(description);
    }

    public Element getDescription() {
        return description;
    }

    public Element getRules() {
        return rules;
    }

    protected final Element pktable;
    protected final Element proptable;
    protected final Element description;
    protected final Element rules;
    protected final Element keys;
    protected final Element fees;
}

