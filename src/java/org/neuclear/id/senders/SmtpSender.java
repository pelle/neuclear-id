package org.neuclear.id.senders;

/**
 * (C) 2003 Antilles Software Ventures SA
 * User: pelleb
 * Date: Feb 14, 2003
 * Time: 9:52:38 AM
 * $Id: SmtpSender.java,v 1.4 2004/05/21 19:24:28 pelle Exp $
 * $Log: SmtpSender.java,v $
 * Revision 1.4  2004/05/21 19:24:28  pelle
 * Changed name of Neuclear Personal Signer to NeuClear Personal Trader
 * More changes from Personality to Account
 * Moved hibernates.properties out from the jar file and to the test directory and where ever it gets used, to avoid conflicts between multiple files.
 *
 * Revision 1.3  2004/04/25 07:28:52  pelle
 * Cosmetic changes to signing servlet and neuclear pay web app.
 * Cosmetic changes to html generated by ServiceBuilder.
 * Fixed some stuff in Sender and SmtpSender
 * Added account registration.
 * Bumped version numbers in project.xml files to final release versions.
 *
 * Revision 1.2  2004/03/22 20:09:46  pelle
 * Added simple ledger for unit testing and in memory use
 *
 * Revision 1.1  2004/03/02 18:59:10  pelle
 * Further cleanups in neuclear-id. Moved everything under id.
 *
 * Revision 1.17  2004/02/18 00:14:33  pelle
 * Many, many clean ups. I've readded Targets in a new method.
 * Gotten rid of NamedObjectBuilder and revamped Identity and Resolvers
 *
 * Revision 1.16  2003/12/16 15:05:00  pelle
 * Added SignedMessage contract for signing simple textual contracts.
 * Added NeuSender, updated SmtpSender and Sender to take plain email addresses (without the mailto:)
 * Added AbstractObjectCreationTest to make it quicker to write unit tests to verify
 * NamedObjectBuilder/SignedNamedObject Pairs.
 * Sample application has been expanded with a basic email application.
 * Updated docs for simple web app.
 * Added missing LGPL LICENSE.txt files to signer and simple app
 *
 * Revision 1.15  2003/12/10 23:58:52  pelle
 * Did some cleaning up in the builders
 * Fixed some stuff in IdentityCreator
 * New maven goal to create executable jarapp
 * We are close to 0.8 final of ID, 0.11 final of XMLSIG and 0.5 of commons.
 * Will release shortly.
 *
 * Revision 1.14  2003/11/21 04:45:13  pelle
 * EncryptedFileStore now works. It uses the PBECipher with DES3 afair.
 * Otherwise You will Finaliate.
 * Anything that can be final has been made final throughout everyting. We've used IDEA's Inspector tool to find all instance of variables that could be final.
 * This should hopefully make everything more stable (and secure).
 *
 * Revision 1.13  2003/11/19 23:33:59  pelle
 * Signers now can generatekeys via the generateKey() method.
 * Refactored the relationship between SignedNamedObject and NamedObjectBuilder a bit.
 * SignedNamedObject now contains the full xml which is returned with getEncoded()
 * This means that it is now possible to further receive on or process a SignedNamedObject, leaving
 * NamedObjectBuilder for its original purposes of purely generating new Contracts.
 * NamedObjectBuilder.sign() now returns a SignedNamedObject which is the prefered way of processing it.
 * Updated all major interfaces that used the old model to use the new model.
 *
 * Revision 1.12  2003/11/11 21:18:43  pelle
 * Further vital reshuffling.
 * org.neudist.crypto.* and org.neudist.utils.* have been moved to respective areas under org.neuclear.commons
 * org.neuclear.signers.* as well as org.neuclear.passphraseagents have been moved under org.neuclear.commons.crypto as well.
 * Did a bit of work on the Canonicalizer and changed a few other minor bits.
 *
 * Revision 1.11  2003/11/10 17:42:36  pelle
 * The AssetController interface has been more or less finalized.
 * CurrencyController fully implemented
 * AssetControlClient implementes a remote client for communicating with AssetControllers
 *
 * Revision 1.10  2003/11/08 01:40:53  pelle
 * WARNING this rev is majorly unstable and will almost certainly not compile.
 * More major refactoring in neuclear-pay.
 * Got rid of neuclear-ledger like features of pay such as Account and Issuer.
 * Accounts have been replaced by Identity from neuclear-id
 * Issuer is now Asset which is a subclass of Identity
 * AssetController supports more than one Asset. Which is important for most non ecurrency implementations.
 * TransferRequest/Receipt and its Held companions are now SignedNamedObjects. Thus to create them you must use
 * their matching TransferRequest/ReceiptBuilder classes.
 * PaymentProcessor has been renamed CurrencyController. I will extract a superclass later to be named AbstractLedgerController
 * which will handle all neuclear-ledger based AssetControllers.
 *
 * Revision 1.9  2003/11/06 23:48:59  pelle
 * Major Refactoring of CurrencyController.
 * Factored out AssetController to be new abstract parent class together with most of its support classes.
 * Created (Half way) AssetControlClient, which can perform transactions on external AssetControllers via NeuClear.
 * Created the first attempt at the ExchangeAgent. This will need use of the AssetControlClient.
 * SOAPTools was changed to return a stream. This is required by the VerifyingReader in NeuClear.
 *
 * Revision 1.8  2003/10/25 00:39:54  pelle
 * Fixed SmtpSender it now sends the messages.
 * Refactored CommandLineSigner. Now it simply signs files read from command line. However new class IdentityCreator
 * is subclassed and creates new Identities. You can subclass CommandLineSigner to create your own variants.
 * Several problems with configuration. Trying to solve at the moment. Updated PicoContainer to beta-2
 *
 * Revision 1.7  2003/10/21 22:31:13  pelle
 * Renamed NeudistException to NeuClearException and moved it to org.neuclear.commons where it makes more sense.
 * Unhooked the XMLException in the xmlsig library from NeuClearException to make all of its exceptions an independent hierarchy.
 * Obviously had to perform many changes throughout the code to support these changes.
 *
 * Revision 1.6  2003/09/29 23:17:32  pelle
 * Changes to the senders. Now the senders only work with NamedObjectBuilders
 * which are the only NamedObject representations that contain full XML.
 *
 * Revision 1.5  2003/09/26 00:22:07  pelle
 * Cleanups and final changes to code for refactoring of the Verifier and Reader part.
 *
 * Revision 1.4  2003/09/24 23:56:48  pelle
 * Refactoring nearly done. New model for creating signed objects.
 * With view for supporting the xmlpull api shortly for performance reasons.
 * Currently still uses dom4j but that has been refactored out that it
 * should now be very quick to implement a xmlpull implementation.
 *
 * A side benefit of this is that the API has been further simplified. I still have some work
 * todo with regards to cleaning up some of the outlying parts of the code.
 *
 * Revision 1.3  2003/09/23 19:16:28  pelle
 * Changed NameSpace to Identity.
 * To cause less confusion in the future.
 *
 * Revision 1.2  2003/09/22 19:24:02  pelle
 * More fixes throughout to problems caused by renaming.
 *
 * Revision 1.1.1.1  2003/09/19 14:41:29  pelle
 * First import into the neuclear project. This was originally under the SF neuclear
 * project. This marks a general major refactoring and renaming ahead.
 *
 * The new name for this code is NeuClear Identity and has the general package header of
 * org.neuclear.id
 * There are other areas within the current code which will be split out into other subprojects later on.
 * In particularly the signers will be completely seperated out as well as the contract types.
 *
 *
 * Revision 1.1  2003/02/14 21:10:35  pelle
 * The email sender works. The LogSender and the SoapSender should work but havent been tested yet.
 * The SignedNamedObject has a new log() method that logs it's contents at it's parent Identity's logger.
 * The Identity object also has a new method receive() which allows one to receive a named object to the Identity's
 * default receiver.
 *
 */

import org.masukomi.aspirin.core.MailQue;
import org.masukomi.aspirin.core.MailWatcher;
import org.neuclear.commons.NeuClearException;
import org.neuclear.commons.Utility;
import org.neuclear.commons.crypto.passphraseagents.UserCancellationException;
import org.neuclear.commons.crypto.signers.TestCaseSigner;
import org.neuclear.id.HTMLBased;
import org.neuclear.id.Identity;
import org.neuclear.id.InvalidNamedObjectException;
import org.neuclear.id.SignedNamedObject;
import org.neuclear.id.builders.Builder;
import org.neuclear.id.builders.IdentityBuilder;
import org.neuclear.id.builders.SignedMessageBuilder;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.util.Collection;
import java.util.Date;
import java.util.Properties;
import java.util.regex.Pattern;

public final class SmtpSender extends Sender {
    public final SignedNamedObject send(String endpoint, final SignedNamedObject obj) throws NeuClearException, UnsupportedEndpointException {
        final Properties props = System.getProperties();
        if (endpoint.startsWith("mailto:"))
            endpoint = endpoint.substring(7);
        // -- Attaching to default Session, or we could start a new one --

        final Session session = Session.getDefaultInstance(props, null);

        try {
            // -- Create a new message --
            final MimeMessage msg = new MimeMessage(session);

            // -- Set the FROM and TO fields --
            msg.setFrom(new InternetAddress(getSender(obj)));// TODO Remove this hardcoded email
            msg.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(endpoint, false));

            // -- We could include CC recipients too --
            // if (cc != null)
            // msg.setRecipients(Message.RecipientType.CC
            // ,InternetAddress.parse(cc, false));

            // -- Set the subject and body text --
            msg.setSubject("You have received a New Signed Object: " + obj.toString());
            final BodyPart body = new MimeBodyPart();
            body.setText("This message contains a signed named object. Please see http://neuclear.org for more info.\n==\n");

            final Multipart multi = new MimeMultipart();
            multi.addBodyPart(body);
            final BodyPart objpart = new MimeBodyPart();
            objpart.setText(obj.getEncoded());
            if (obj instanceof HTMLBased)
                objpart.setHeader("Content-type", "text/html");
            else
                objpart.setHeader("Content-type", "text/xml");
            multi.addBodyPart(objpart);
            msg.setContent(multi);

            msg.setHeader("X-Mailer", "NeuClear Framework");
            msg.setSentDate(new Date());

            // -- Send the message --
            MailQue.queMail(msg);
//            Transport.send(msg);
        } catch (MessagingException e) {
            e.printStackTrace();  //To change body of catch statement use Options | File Templates.
            Utility.rethrowException(e);
        }

        return null;// We never receive a response
    }

    private String getSender(final SignedNamedObject obj) {
//        Identity senderid=obj.getSignatory();
//        final Matcher matcher = SENDER.matcher(senderid.getReceiver());
//        if (matcher.matches())
//            return matcher.group(2) ;
        return "noreply@neuclear.org";
    }

    {
        MailQue.addListener(new MailWatcher() {
            public void deliverySuccess(MimeMessage message, Collection recepients) {
                System.out.println("mail delivered successfully");
            }

            public void deliveryFailure(MimeMessage message, Collection recepients) {
                System.out.println("mail delivery failed");

            }
        });
    }

    private static final Pattern SENDER = Pattern.compile("^(mailto:)([\\w-.]+\\@[\\w-.]+)");

    public static void main(String args[]) {

        IdentityBuilder builder = new IdentityBuilder("pelle", "http://talk.org/pelle.html", "mailto:pelle@neuclear.com", "This is cool");
        try {
            final TestCaseSigner signer = new TestCaseSigner();
            Identity id = (Identity) builder.convert("bob", signer);
            for (int i = 0; i < 3; i++) {
                Builder b = new SignedMessageBuilder("hello " + i, "this is a test");
                id.send(b.convert("alice", signer));
            }
        } catch (InvalidNamedObjectException e) {
            e.printStackTrace();
        } catch (UserCancellationException e) {
            e.printStackTrace();
        } catch (NeuClearException e) {
            e.printStackTrace();
        }
    }
}
