<?xml version="1.0"?>
<document>

    <properties>
        <title>The Busy Developer's Guide to the NeuClear ID API</title>
        <author email="pelle@neubia.com">Pelle Braendgaard</author>
    </properties>

    <body>
        <section name="The Busy Developer's Guide to the NeuClear ID API">

            <h4>Scope</h4>
            <p>
                This document describes in Example form the usage of the NeuClear ID API. The Document is not intended as
                an implementation document or a strict API definition. The current API Specifications can be found in the
                <a href="apidocs/index.html">Project Java Docs</a>.
            </p>
            <h4>Audience</h4>
            <p>
                The audience for this developers guide are expected to be relatively familiar with Java. The instructions are
                currently listed for unix type machines, but it should work on any machine running jdk1.4 including Windows.
            </p>
            <h4>Purpose</h4>
            <p>
                    The main purpose of the NeuClear ID API is to provide a simple framework and API for building applications
                    using a Public Key Infrastructure (PKI).
            </p>
        </section>
        <section name="Signed Objects">
            <p>
                <a href="/apidocs/org/neuclear/id/SignedNamedObject.html">SignedNamedObjects</a> is the core super class of
                all business objects within NeuClear. Behind each SignedNamedObject is a XML file with an
                <a href="http://dev.neuclear.org/xmlsig/">XML Signature</a>.
            </p>
            <p>
                The two key pieces of information you would want to get from a SignedNamedObject is who signed it
                (
                <a href="/apidocs/org/neuclear/id/Signatory.html">Signatory</a>) and it's Digest (Unique Identifier).
                These can be found with:
            </p>
            <ul>
                <li>
                    <tt>getSignatory()</tt>
                </li>
                <li>
                    <tt>getDigest()</tt>
                </li>
            </ul>
            <p>
                An example of loading a signed object from across the internet can be found below:
            </p>
            <source>SignedNamedObject obj=Resolver.resolve("http://talk.org/pelletest.html");
System.out.println("Digest: "+obj.getDigest());
System.out.println("Signatory: "+obj.getSignatory().getName());
            </source>
            <p>Which outputs:</p>
            <source>Digest: szt6uy3a2mq7mag27iauj2lrd7cshzuq
Signatory: sfjaenowpzytkls4wtqdqhks7k55obbc</source>
            <p>
                The
                <a href="/apidocs/org/neuclear/id/resolver/Resolver.html">Resolver</a> is a handy class which will attempt to get the object from either a URL or from its local cache.
            </p>
        </section>
        <section name="Creating Signed Objects">
            <p>
                Any xml following the XML Signature standard for Enveloped Signature with an embedded PublicKey can be used as
                a Signed Object. NeuClearID offers an easy class
                <a href="/apidocs/org/neuclear/id/builders/Builder.html">Builder</a> to
                create your own. Builder should generally speaking be subclassed to create objects in your business domain. Here we
                will use a
                <a href="/apidocs/org/neuclear/id/builders/SignedMessageBuilder.html">SignedMessageBuilder</a> to create
                and sign a simple message.
            </p>
            <source>// First lets create a Signer
BrowsableSigner signer=new DefaultSigner(new SwingAgent());

// Build the unsigned message
SignedMessageBuilder builder=new SignedMessageBuilder("Hello World","How do you do?");

// Sign and convert message
SignedMessage message=(SignedMessage) builder.convert(signer);
            </source>
            <p>This introduces the
                <a href="http://dev.neuclear.org/commons/apidocs/org/neuclear/commons/crypto/signers/Signer.html">Signer</a>
                from
                <a href="http://dev.neuclear.org/commons/">NeuClear Commons</a>, which we instantiate to use a Swing GUI front end.
            </p>
            <p>Then we create a builder. The builder is basically a handy way of creating a standardized unsigned XML message.</p>
            <p>You then sign and convert the builder using it's
                <tt>convert()</tt> method. The method returns a
                <tt>SignedNamedObject</tt>
            which you may cast to a
                <tt>SignedMessage</tt>
            </p>
        </section>


    </body>

</document>
