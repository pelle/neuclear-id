<?xml version="1.0"?>
<document>

    <properties>
        <title>The Busy Developer's Guide to the NeuClear ID API</title>
        <author email="pelle@neubia.com">Pelle Braendgaard</author>
    </properties>

    <body>
        <section name="The Busy Developer's Guide to the NeuClear ID API">

            <h4>Scope</h4>
            <p>
                This document describes in Example form the usage of the NeuClear ID API. The Document is not intended as
                an implementation document or a strict API definition. The current API Specifications can be found in the
                <a href="apidocs/index.html">Project Java Docs</a>.
            </p>
            <h4>Audience</h4>
            <p>
                The audience for this developers guide are expected to be relatively familiar with Java. The instructions are
                currently listed for unix type machines, but it should work on any machine running jdk1.4 including Windows.
            </p>
            <h4>Purpose</h4>
            <p>
                    The main purpose of the NeuClear ID API is to provide a simple framework and API for building applications
                    using a Public Key Infrastructure (PKI).
            </p>
        </section>
        <section name="Signed Objects">
            <p>
                <a href="apidocs/org/neuclear/id/SignedNamedObject.html">SignedNamedObjects</a> is the core super class of
                all business objects within NeuClear. Behind each SignedNamedObject is a XML file with an
                <a href="http://dev.neuclear.org/xmlsig/">XML Signature</a>.
            </p>
            <p>
                The two key pieces of information you would want to get from a SignedNamedObject is who signed it
                (
                <a href="apidocs/org/neuclear/id/Signatory.html">Signatory</a>) and it's Digest (Unique Identifier).
                These can be found with:
            </p>
            <ul>
                <li>
                    <tt>getSignatory()</tt>
                </li>
                <li>
                    <tt>getDigest()</tt>
                </li>
            </ul>
            <p>
                An example of loading a signed object from across the internet can be found below:
            </p>
            <source>SignedNamedObject obj=Resolver.resolve("http://talk.org/pelletest.html");
System.out.println("Digest: "+obj.getDigest());
System.out.println("Signatory: "+obj.getSignatory().getName());
            </source>
            <p>Which outputs:</p>
            <source>Digest: szt6uy3a2mq7mag27iauj2lrd7cshzuq
Signatory: sfjaenowpzytkls4wtqdqhks7k55obbc</source>
            <p>
                The
                <a href="apidocs/org/neuclear/id/resolver/Resolver.html">Resolver</a> is a handy class which will attempt to get the object from either a URL or from its local cache.
            </p>
        </section>
        <section name="Creating Signed Objects">
            <p>
                Any xml following the XML Signature standard for Enveloped Signature with an embedded PublicKey can be used as
                a Signed Object. NeuClearID offers an easy class
                <a href="apidocs/org/neuclear/id/builders/Builder.html">Builder</a> to
                create your own. Builder should generally speaking be subclassed to create objects in your business domain. Here we
                will use a
                <a href="apidocs/org/neuclear/id/builders/SignedMessageBuilder.html">SignedMessageBuilder</a> to create
                and sign a simple message.
            </p>
            <source>// First lets create a Signer
BrowsableSigner signer=new DefaultSigner(new SwingAgent());

// Build the unsigned message
SignedMessageBuilder builder=new SignedMessageBuilder("Hello World","How do you do?");

// Sign and convert message
SignedMessage message=(SignedMessage) builder.convert(signer);
            </source>
            <p>This introduces the
                <a href="http://dev.neuclear.org/commons/apidocs/org/neuclear/commons/crypto/signers/Signer.html">Signer</a>
                from
                <a href="http://dev.neuclear.org/commons/">NeuClear Commons</a>, which we instantiate to use a Swing GUI front end.
            </p>
            <p>Then we create a builder. The builder is basically a handy way of creating a standardized unsigned XML message.</p>
            <p>You then sign and convert the builder using it's
                <tt>convert()</tt> method. The method returns a
                <tt>SignedNamedObject</tt>
            which you may cast to a
                <tt>SignedMessage</tt>
            </p>
        </section>
        <section name="Identity Objects">
            <p>
                NeuClear uses the concept of Identity objects. These are simply HTML pages where you can put whatever you want
                about your self and then sign it. The main object at this is a simple way to give people your public key.
                These identity pages help provide trust to yourself as well. If you provide a link to a blog from your identity
                page, people might trust you more than if you were some anonymous no one.
            </p>
            <p>
                To create an identity object create a html page about yourself. Write as little or as much as you want to.
                Use a nickname or your real name. You decide. Decide a nickname that people can use to describe you to yourself.
                Lets say you chose the nickname 'bob'. Pick a piece of html somewhere on your page and add the following:
            </p>
            <source><![CDATA[<div id="nickname">bob</div>]]></source>
            <p>or</p>
            <source><![CDATA[<h1 id="nickname">bob</h1>]]></source>
            <p>
                The key is that an element named nickname exists within the page and that the program can extract your
                nickname from the document. In future releases we expect to support
                <a href="http://xmlns.com/foaf/0.1/">FOAF</a>
                vocabulary within your Identity html to support Social Networking and web of trust applications as well.
            </p>
            <h4>Adding Targets</h4>
            <p>
                Targets are where people and services can send you receipts, requests etc. For now you can use your email address.
                You specify your targets as
                <tt>&lt;link/></tt> elements within the
                <tt>&lt;head/></tt> element of your html:
            </p>
            <source>
                <span style="color:#AAA">&lt;html>
                    &lt;head>
                    &lt;title>Bob Smith's Identity Page&lt;/title>
                    <span style="color:#008">&lt;link rel="neu:receiver" href="mailto:bob@test.com"/></span>
                    &lt;/head>
                    &lt;body>
        ...
                    &lt;/body>
                    &lt;/html>
                </span>
            </source>
            <h4>Specifying Original Source URL</h4>
            <p>
                Its a good idea to specify as well in this html file the "original source url" which is the URL where
                this file lives. eg. http://bobsmith.com/bobid.html
            </p>
            <source>
                <span style="color:#AAA">&lt;html>
                    &lt;head>
                    &lt;title>Bob Smith's Identity Page&lt;/title>
                    &lt;link rel="neu:receiver" href="mailto:bob@test.com"/>
                    <span style="color:#008">&lt;link rel="original" href=http://bobsmith.com/bobid.html"/></span>
                    &lt;/head>
                    &lt;body>
        ...
                    &lt;/body>
                    &lt;/html>
                </span>
            </source>
            <p>
                Once you have created this html file and saved it to disk. Start the
                <a href="http://dist.neuclear.org/app/neuclear-signer.jnlp">
                    NeuClear Personal Signer</a> via Java Web Start to create a new Key Pair ("Personality") and sign the file.
                Then upload it to the url you put in the original source url link.
            </p>
        </section>
        <section name="Sending a Signed Object">
            <p>
                We now expand on our previous code to send the signed message to our Identity.
            </p>
            <source>// First lets create a Signer
BrowsableSigner signer=new DefaultSigner(new SwingAgent());

// Build the unsigned message
SignedMessageBuilder builder=new SignedMessageBuilder("Hello World","How do you do?");

// Sign and convert message
SignedMessage message=(SignedMessage) builder.convert(signer);

// Fetch Identity
Identity id=Resolver.resolveIdentity("http://bobsmith.com/bobid.html");

// Send Message
id.send(message);
            </source>
            <p>
                The resolver has a special version of
                <tt>resolve()</tt> called
                <tt>resolveIdentity()</tt> which
                returns an Identity object. Remember the Identity object is a subclass of SignedNamedObject. The Identity
                object has a method
                <tt>send()</tt> which allows you to send messages to the targets of the Identity.
            </p>
        </section>
        <section name="Creating Web Services">
            <p>
                Coming soon.
            </p>
        </section>

    </body>

</document>
